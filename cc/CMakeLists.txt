cmake_minimum_required(VERSION 3.0)

project(Cyan VERSION 1.2.0)

if(NOT PROJECT_VERSION_PATCH)
	set(PROJECT_VERSION_PATCH 0)
endif()
if(NOT PROJECT_VERSION_TWEAK)
	set(PROJECT_VERSION_TWEAK 0)
endif()
add_definitions(-DCYAN_VERSION="${PROJECT_VERSION}")
add_definitions(-DCYAN_GIT="$ENV{GIT}")

set(COMPANY "${PROJECT_NAME}")
set(COPYRIGHT "(c)2016-2018 Ole-Andre Rodlie. All rights reserved.")
set(IDENTIFIER "net.fxarena.cyan")
set(SOURCES main.cpp cyan.cpp imageview.cpp profiledialog.cpp helpdialog.cpp ../fxx/FXX.cxx ../res/cyan.qrc ../docs/docs.qrc)
set(HEADERS cyan.h imageview.cpp profiledialog.cpp helpdialog.cpp ../fxx/FXX.h)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../fxx/cmake/modules/")
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(RESOURCE_FILES ../res/cyan.qrc ../docs/docs.qrc)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

if(NOT RESOURCE_FOLDER)
	set(RESOURCE_FOLDER ../res)
endif()

option(USE_PKGCONFIG "USE_PKGCONFIG" OFF)
option(USE_Q32 "USE_Q32" OFF)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11")

if(APPLE)
	set(ICON_FILE ${RESOURCE_FOLDER}/${PROJECT_NAME}.icns)
	set(CMAKE_OSX_DEPLOYMENT_TARGET "10.7")
	set_source_files_properties(${PROJECT_NAME}.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
	set(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})
	set(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
	set(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
	set(MACOSX_BUNDLE_SHORT_VERSION_STRING "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
	set(MACOSX_BUNDLE_COPYRIGHT ${COPYRIGHT})
	set(MACOSX_BUNDLE_GUI_IDENTIFIER ${IDENTIFIER})
	set(MACOSX_BUNDLE_ICON_FILE Cyan)
endif()

if(WIN32)
	set(ICON_FILE ${RESOURCE_FOLDER}/cyan.ico)
endif()

if(MINGW OR APPLE)
	find_package(OpenMP)
	find_package(Threads)
	target_link_libraries(${PROJECT_NAME} Threads::Threads)
endif()

find_package(Qt5Widgets REQUIRED)
find_package(Qt5Concurrent REQUIRED)
add_executable(Cyan ${SOURCES} ${HEADERS} ${RESOURCES_FILES})
target_link_libraries(${PROJECT_NAME} Qt5::Widgets)
target_link_libraries(${PROJECT_NAME} Qt5::Concurrent)
include_directories(../fxx)

if(USE_PKGCONFIG)
	find_package(PkgConfig)
	pkg_search_module(MAGICK REQUIRED Magick++)
	pkg_search_module(LCMS2 REQUIRED lcms2)
	add_compile_options(${MAGICK_CFLAGS})
	target_link_libraries(${PROJECT_NAME} ${MAGICK_LIBRARIES})
	target_link_libraries(${PROJECT_NAME} ${LCMS2_LIBRARIES})
	include_directories(${MAGICK_INCLUDE_DIRS} ${LCMS2_INCLUDE_DIRS})
else()
	find_package(LCMS2 REQUIRED)
	include_directories(${LCMS2_INCLUDE_DIR})
	find_package(ImageMagick COMPONENTS MagickCore REQUIRED)
	find_package(ImageMagick COMPONENTS MagickWand REQUIRED)
	find_package(ImageMagick COMPONENTS Magick++ REQUIRED)
	include_directories(${ImageMagick_INCLUDE_DIRS})
	if(USE_Q32)
		add_definitions(-DMAGICKCORE_QUANTUM_DEPTH=32)
	else()
		add_definitions(-DMAGICKCORE_QUANTUM_DEPTH=16)
	endif()
	add_definitions(-DMAGICKCORE_HDRI_ENABLE=1)
	add_compile_options(${MAGICK_CFLAGS})
	target_link_libraries(${PROJECT_NAME} ${LCMS2_LIBRARY})
	target_link_libraries(${PROJECT_NAME} ${ImageMagick_LIBRARIES})
	target_link_libraries(${PROJECT_NAME} ${ImageMagick_MagickCore_LIBRARIES})
	target_link_libraries(${PROJECT_NAME} ${ImageMagick_MagickWand_LIBRARIES})
	target_link_libraries(${PROJECT_NAME} ${ImageMagick_Magick++_LIBRARIES})
endif()

