cmake_minimum_required(VERSION 3.0)

project(FXX VERSION 1.0.0)
option(USE_PKGCONFIG "USE_PKGCONFIG" ON)

if(MINGW)
    find_package(OpenMP)
    find_package(Threads)
endif()

if (USE_PKGCONFIG)
    find_package(PkgConfig)
    pkg_search_module(MAGICK REQUIRED Magick++)
    pkg_search_module(LCMS2 REQUIRED lcms2)
    add_compile_options(${MAGICK_CFLAGS})
else()
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")
    find_package(LCMS2 REQUIRED)
    include_directories(${LCMS2_INCLUDE_DIR})
    find_package(ImageMagick COMPONENTS MagickCore REQUIRED)
    find_package(ImageMagick COMPONENTS MagickWand REQUIRED)
    find_package(ImageMagick COMPONENTS Magick++ REQUIRED)
    include_directories(${ImageMagick_INCLUDE_DIRS})
    add_definitions(-DMAGICKCORE_QUANTUM_DEPTH=16)
    add_definitions(-DMAGICKCORE_HDRI_ENABLE=1)
    add_compile_options(${MAGICK_CFLAGS})
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11")

add_library(${PROJECT_NAME} SHARED ${PROJECT_NAME}.cxx)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})
set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER ${PROJECT_NAME}.h)
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION ${PROJECT_VERSION_MAJOR})

if (USE_PKGCONFIG)
    target_link_libraries(${PROJECT_NAME} ${MAGICK_LIBRARIES})
    target_link_libraries(${PROJECT_NAME} ${LCMS2_LIBRARIES})
    include_directories(${MAGICK_INCLUDE_DIRS} ${LCMS2_INCLUDE_DIRS})
else()
    target_link_libraries(${PROJECT_NAME} ${LCMS2_LIBRARY})
    target_link_libraries(${PROJECT_NAME} ${ImageMagick_LIBRARIES})
    target_link_libraries(${PROJECT_NAME} ${ImageMagick_MagickCore_LIBRARIES})
    target_link_libraries(${PROJECT_NAME} ${ImageMagick_MagickWand_LIBRARIES})
    target_link_libraries(${PROJECT_NAME} ${ImageMagick_Magick++_LIBRARIES})
endif()

if (MINGW)
    target_link_libraries(${PROJECT_NAME} Threads::Threads)
endif()

if (UNIX)
    include(GNUInstallDirs)
    install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
    configure_file(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)
    install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()
